!(function (e, t) {
  const n = typeof t.jQuery !== 'undefined' && t.jQuery; t.ReactRailsUJS = {
    CLASS_NAME_ATTR: 'data-react-class', PROPS_ATTR: 'data-react-props', findDOMNodes(i) { let o; let r; switch (typeof i) { case 'undefined': o = `[${t.ReactRailsUJS.CLASS_NAME_ATTR}]`, r = e; break; case 'object': o = `[${t.ReactRailsUJS.CLASS_NAME_ATTR}]`, r = i; break; case 'string': o = `${i}[${t.ReactRailsUJS.CLASS_NAME_ATTR}], ${i} [${t.ReactRailsUJS.CLASS_NAME_ATTR}]`, r = e; } return n ? n(o, r) : r.querySelectorAll(o); }, getConstructor(e) { let n; return n = t[e], n || (n = eval.call(t, e)), n && n.default && (n = n.default), n; }, mountComponents(e) { for (let n = t.ReactRailsUJS.findDOMNodes(e), i = 0; i < n.length; ++i) { const o = n[i]; const r = o.getAttribute(t.ReactRailsUJS.CLASS_NAME_ATTR); const s = this.getConstructor(r); const a = o.getAttribute(t.ReactRailsUJS.PROPS_ATTR); const l = a && JSON.parse(a); if (typeof s === 'undefined') { const c = `Cannot find component: '${r}'`; console && console.log && console.log(`%c[react-rails] %c${c} for element`, 'font-weight: bold', '', o); const u = new Error(`${c}. Make sure your component is globally available to render.`); throw u; }ReactDOM.render(React.createElement(s, l), o); } }, unmountComponents(e) { for (let n = t.ReactRailsUJS.findDOMNodes(e), i = 0; i < n.length; ++i) { const o = n[i]; ReactDOM.unmountComponentAtNode(o); } },
  };
}(document, window)), (function (e, t) { t.ReactRailsUJS.Turbolinks = { setup() { ReactRailsUJS.handleEvent('turbolinks:load', () => { t.ReactRailsUJS.mountComponents(); }), ReactRailsUJS.handleEvent('turbolinks:before-render', () => { t.ReactRailsUJS.unmountComponents(); }); } }; }(document, window)), (function (e, t) { t.ReactRailsUJS.TurbolinksClassic = { setup() { ReactRailsUJS.handleEvent(Turbolinks.EVENTS.CHANGE, () => { t.ReactRailsUJS.mountComponents(); }), ReactRailsUJS.handleEvent(Turbolinks.EVENTS.BEFORE_UNLOAD, () => { t.ReactRailsUJS.unmountComponents(); }); } }; }(document, window)), (function (e, t) { t.ReactRailsUJS.TurbolinksClassicDeprecated = { setup() { Turbolinks.pagesCached(0), ReactRailsUJS.handleEvent('page:change', () => { t.ReactRailsUJS.mountComponents(); }), ReactRailsUJS.handleEvent('page:receive', () => { t.ReactRailsUJS.unmountComponents(); }); } }; }(document, window)), (function (e, t) { t.ReactRailsUJS.pjax = { setup() { ReactRailsUJS.handleEvent('ready', () => { t.ReactRailsUJS.mountComponents(); }), ReactRailsUJS.handleEvent('pjax:end', (e) => { t.ReactRailsUJS.mountComponents(e.target); }), ReactRailsUJS.handleEvent('pjax:beforeReplace', (e) => { t.ReactRailsUJS.unmountComponents(e.target); }); } }; }(document, window)), (function (e, t) { const n = typeof t.jQuery !== 'undefined' && t.jQuery; t.ReactRailsUJS.Native = { setup() { n ? n(() => { t.ReactRailsUJS.mountComponents(); }) : 'addEventListener' in t ? e.addEventListener('DOMContentLoaded', () => { t.ReactRailsUJS.mountComponents(); }) : t.attachEvent('onload', () => { t.ReactRailsUJS.mountComponents(); }); } }; }(document, window)), (function (e, t) { const n = typeof t.jQuery !== 'undefined' && t.jQuery; n ? ReactRailsUJS.handleEvent = function (t, i) { n(e).on(t, i); } : ReactRailsUJS.handleEvent = function (t, n) { e.addEventListener(t, n); }, typeof Turbolinks !== 'undefined' && Turbolinks.supported ? typeof Turbolinks.EVENTS !== 'undefined' ? ReactRailsUJS.TurbolinksClassic.setup() : typeof Turbolinks.controller !== 'undefined' ? ReactRailsUJS.Turbolinks.setup() : ReactRailsUJS.TurbolinksClassicDeprecated.setup() : n && typeof n.pjax === 'function' ? ReactRailsUJS.pjax.setup() : ReactRailsUJS.Native.setup(); }(document, window));
